#define XRES 18
#define YRES 12
#define EXPAND 64
#define DEPTH 2048

#ifndef TIER
#define TIER 1
#endif

use Tier1: all;
#if TIER >= 2
use Tier2: all;
#if TIER >= 3
use Tier3: all;
#if TIER >= 4
use Tier4: all;
#endif // TIER >= 4
#endif // TIER >= 3
#endif // TIER >= 2

use Structures: all;
use SDLdisplay: all;

int main()
{
    disp = initDisplay(EXPAND * [YRES, XRES]);
    cmin = [toc(-2.2,  1.0)];
    cmax = [toc( 0.8, -1.0)];

    while (true) {
        expand = EXPAND;
        xres = XRES;
        yres = YRES;

        do {
            StdIO::printf("Generating %ix%i array...\n", xres, yres);
            plane = genComplexArray(xres, yres, cmin[0], cmax[0]);

            #if TIER == 1

                StdIO::printf("Computing escape time...\n");
                ts = escapeTime(plane, DEPTH);

                StdIO::printf("Converting to rgb...\n");
                rgbs = intArrayToMonochrome(ts);

            #elif TIER >= 2

                StdIO::printf("Computing escape time...\n");
                ts, vs = escapeTimeAndValue(plane, DEPTH);

                StdIO::printf("Normalizing...\n");
                nvs = normalizedIterationCount(ts, vs);

                StdIO::printf("Converting to rgb...\n");
                rgbs = doubleArrayToRGB(nvs);

                #if TIER >= 3

                    StdIO::printf("Blurring...\n");
                    rgbs = gaussBlur(gaussBlur25(rgbs));

                    #if TIER >= 4

                        StdIO::printf("Sobel edges...\n");
                        rgbs = sobelEdges(rgbs);

                    #endif // TIER >= 4
                #endif // TIER >= 3
            #endif // TIER >= 2

            rgbs = stretchRgb(rgbs, expand);
            drawArray(disp, rgbs);

            expand /= 2;
            xres *= 2;
            yres *= 2;
        } while (expand > 0);

        StdIO::printf("Waiting for input...\n");

        zoom_coords = getSelection(disp);
        if (all(zoom_coords >= 0)) {
            plane = genComplexArray(EXPAND * XRES, EXPAND * YRES, cmin[0], cmax[0]);
            cmin = [plane[zoom_coords[0]]] ++ cmin;
            cmax = [plane[zoom_coords[1]]] ++ cmax;
        } else if (shape(cmin)[0] > 1) {
            cmin = drop([1], cmin);
            cmax = drop([1], cmax);
        }
    }

    destroyDisplay(disp);
    return 0;
}

inline
color[2:sshp] stretchRgb(color[2:shp] img, int stretch)
{
    return { iv -> img[iv / stretch] | iv < shp * stretch };
}
