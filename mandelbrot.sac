#define XRES 384
#define YRES 256
#define DEPTH 1024

#ifndef TIER
#define TIER 1
#endif

use Tier1: all;
#if TIER >= 2
use Tier2: all;
#if TIER >= 3
use Tier3: all;
#endif
#endif

use Structures: all;
use SDLdisplay: all;

int main()
{
    disp = initDisplay([YRES, XRES]);
    cmin = [toc(-2.2,  1.0)];
    cmax = [toc( 0.8, -1.0)];

    while (true) {
        StdIO::printf("Generating array...\n");
        plane = genComplexArray([YRES, XRES], cmin[0], cmax[0]);

    #if TIER == 1

        StdIO::printf("Computing escape time...\n");
        ts = escapeTime(plane, DEPTH);

        StdIO::printf("Converting to rgb...\n");
        rgbs = intArrayToMonochrome(ts);

    #elif TIER >= 2

        StdIO::printf("Computing escape time...\n");
        ts, vs = escapeTimeAndValue(plane, DEPTH);

        StdIO::printf("Normalizing...\n");
        nvs = normalizedIterationCount(ts, vs);

        StdIO::printf("Converting to rgb...\n");
        rgbs = doubleArrayToRGB(nvs);

    #if TIER >= 3

        //StdIO::printf("Blurring...\n");
        //rgbs = gaussBlur25(rgbs);
        StdIO::printf("Blurring...\n");
        rgbs = gaussBlur(rgbs);

    #endif // TIER >= 3
    #endif // TIER >= 2

        drawArray(disp, rgbs);

        StdIO::printf("Waiting for input...\n");

        zoom_coords = getSelection(disp);
        if (all(zoom_coords >= 0)) {
            cmin = [plane[zoom_coords[0]]] ++ cmin;
            cmax = [plane[zoom_coords[1]]] ++ cmax;
        } else if (shape(cmin)[0] > 1) {
            cmin = drop([1], cmin);
            cmax = drop([1], cmax);
        }
    }

    destroyDisplay(disp);
    return 0;
}

