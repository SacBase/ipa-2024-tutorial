module Tier4;
use Structures: all;
use Tier3: { relax };
export all;

/**
 * The Sobel operator is an edge-detection filter that computes the gradient image from an input signal.
 * The filtering process consists of three steps: In the first step, horizontal edges are detected,
 * in the second step vertical edges are detected, and in the final step, both sub-results are combined
 * to the resulting gradient image. The first two steps are in fact two independent operations, each of
 * which requires its own individual filter mask: `weightY` and `weightsX`.
 */
inline
int[2:shp] sobelEdges(int[2:shp] arr)
{
    weightsY = [
        [ 1,  2,  1],
        [ 0,  0,  0],
        [-1, -2, -1]
    ];
    weightsX = transpose(weightsY);

    resX = relax(weightsX, arr);
    resY = relax(weightsY, arr);
    return min(resX + resY, 255);
}

/**
 * Applies Sobel edges on the given image. This operation is applied once to each color channel.
 * I.e., it is applied once to all red values, once to all green values, and once to all blue values.
 */
inline
color[2:shp] sobelEdges(color[2:shp] img)
{
    // Transform to put color on the first axis
    color_major = { [col, y, x] -> toi(img)[y, x, col] };

    blur = { [i] -> sobelEdges(color_major[i]) };

    // Put color back at the last axis
    idx_major = { [y, x, col] -> blur[col, y, x] };

    return { iv -> (color)(idx_major[iv]) | iv < shp };
}
