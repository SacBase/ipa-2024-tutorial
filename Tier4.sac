module Tier4;

use Array: all;
use Tier3: { apply };

export { sobelEdges };

/*
 * Cut off all values that are geq to a given max_val
 * This is used to remove any invalid 8-bit grayscale values (> 255)
 */
inline
int thrs( int val, int max_val)
{
  return( val <= max_val ? val : max_val);
}

inline
int[*] thrs( int[*] vals, int max_val)
{
  res = with{ ( . <= iv <= . ) : thrs( vals[iv], max_val);
        } : genarray( shape( vals), 0);

  return( res);
}

inline
int[.,.] sobelEdges( int[.,.] img)
{
  SY = [
        [1, 2, 1],
        [0, 0, 0],
        [-1, -2, -1]
       ];
  SX = transpose( SY);

  resX = apply( SX, img);
  resY = apply( SY, img);

  return( thrs( resX + resY, 255));
}

inline
Color8::color[.,.] sobelEdges( Color8::color[.,.] img)
{
  int_res = { [.,.,i] -> sobelEdges( (Color8::toi( img)[.,.,i])) };
  res = { [x,y] -> Color8::newColor( int_res[x,y]) };
  return( res);
}
