module Tier2;
use Structures: all;
use Numerical: { log2 };
export all;

inline
int, complex escapeTimeAndValue(complex c, int depth)
{
    time = 0;
    val = c;

    while (time <= depth && normSq(val) <= 4d) {
        val = val * val + c;
        time += 1;
    }

    return (time, val);
}

inline
int[2:shp], complex[2:shp] escapeTimeAndValue(complex[2:shp] plane, int depth)
{
    times, values = { iv -> escapeTimeAndValue (plane[iv], depth)
                    | iv < shp };
    return (times, values);
}

inline
double[2:shp] normalizedIterationCount(int[2:shp] times, complex[2:shp] values)
{
    return where(normSq(values) <= 4d, 0d, tod(times + 1) - log2(log2(norm(values))));
}

inline
color[2:shp] doubleArrayToRGB(double[2:shp] arr)
{
    min = minval(arr);
    max = maxval(arr);
    scaled_vals = (arr - min) / (max - min);
    rgbs = Hsb2Rgb(toi(scaled_vals * 360d), 60, 80);
    return rgbs;
}
