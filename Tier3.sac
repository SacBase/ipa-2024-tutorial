module Tier3;
use Structures: all;
export all;

inline
int[2:shp] relax(int[m,m] weights, int[2:shp] arr)
{
    return { iv -> sum({ ov -> weights[ov] * rotate(m / 2 - ov, arr)[iv] })
           | iv < shp };
}

inline
int[2:shp] gaussBlur(int[2:shp] img)
{
    weights = [
        [1, 2, 1],
        [2, 3, 2],
        [1, 2, 1]
    ];
    return relax(weights, img) / sum(weights);
}

inline
color[2:shp] gaussBlur(color[2:shp] img)
{
    // Reshape to put color on the first axis
    color_major = {[i, j, k] -> toi(img)[k, i, j]};

    blur = { [i] -> gaussBlur(color_major[i]) };

    // Put color back at the last axis
    idx_major = {[k, i, j] -> blur[i, j, k]};

    return { iv -> newColor(idx_major[iv]) | iv < shp };
}

inline
int[2:shp] gaussBlur25(int[2:shp] img)
{
    weights = [
        [1,  4,  7,  4, 1],
        [4, 20, 33, 20, 4],
        [7, 33, 55, 33, 7],
        [4, 20, 33, 20, 4],
        [1,  4,  7,  4, 1]
    ];
    return relax(weights, img) / sum(weights);
}

inline
color[2:shp] gaussBlur25(color[2:shp] img)
{
    // Reshape to put color on the first axis
    color_major = {[i, j, k] -> toi(img)[k, i, j]};

    blur = { [i] -> gaussBlur25(color_major[i]) };

    // Put color back at the last axis
    idx_major = {[k, i, j] -> blur[i, j, k]};

    return { iv -> newColor(idx_major[iv]) | iv < shp };
}
