module Tier1;
use Structures: all;
export all;

inline
complex[2:shp] genComplexArray(int[2] shp, complex cmin, complex cmax)
{
    return { iv -> cmin + toc(reverse((tod(iv) / tod(shp))
                                      * reverse( todv(cmax-cmin))))
           | iv < shp };
}

int escapeTime(complex z, int depth)
{
    i = 0;
    c = z;

    while (i <= depth && normSq(c) <= 4d) {
        c = c * c + z;
        i += 1;
    }

    return i;
}

inline
int[2:shp] escapeTime(complex[2:shp] plane, int depth)
{
    return { iv -> escapeTime(plane[iv], depth)
           | iv < shp };
}

inline
color[2:shp] intArrayToMonochrome(int[2:shp] arr)
{
    arr = (arr * 255) / maxval(arr);
    clut = genLogarithmicClut(0.4d, 0.9d, black(), red());
    return { iv -> clut[arr[iv]] };
}
