module Tier1;
use Structures: all;
export all;

inline
complex[yres,xres] genComplexArray(int xres, int yres, complex cmin, complex cmax)
{
    cdifReal = real(cmax) - real(cmin);
    cdifImag = imag(cmax) - imag(cmin);
    return { [y,x] -> cmin + toc((tod(x) / tod(xres)) * cdifReal,
                                 (tod(y) / tod(yres)) * cdifImag)
           | [y,x] < [yres,xres] };
}

inline
int escapeTime(complex c, int depth)
{
    time = 0;
    val = c;

    while (time <= depth && normSq(val) <= 4d) {
        val = val * val + c;
        time += 1;
    }

    return time;
}

inline
int[2:shp] escapeTime(complex[2:shp] plane, int depth)
{
    return { iv -> escapeTime(plane[iv], depth)
           | iv < shp };
}

inline
color[2:shp] intArrayToMonochrome(int[2:shp] arr)
{
    arr = (arr * 255) / maxval(arr);
    clut = genLogarithmicClut(0.4d, 0.9d, black(), red());
    return { iv -> clut[arr[iv]] };
}
